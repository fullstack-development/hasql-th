{-|

Our parsing strategy is to port the original Postgres parser as closely as possible.

We're using the @gram.y@ Postgres source file, which is the closest thing we have
to a Postgres syntax spec. Here's a link to it:
https://github.com/postgres/postgres/blob/master/src/backend/parser/gram.y.

Here's the essence of how the original parser is implemented, citing from
[PostgreSQL Wiki](https://wiki.postgresql.org/wiki/Developer_FAQ):

    scan.l defines the lexer, i.e. the algorithm that splits a string
    (containing an SQL statement) into a stream of tokens.
    A token is usually a single word
    (i.e., doesn't contain spaces but is delimited by spaces), 
    but can also be a whole single or double-quoted string for example. 
    The lexer is basically defined in terms of regular expressions 
    which describe the different token types.

    gram.y defines the grammar (the syntactical structure) of SQL statements,
    using the tokens generated by the lexer as basic building blocks.
    The grammar is defined in BNF notation.
    BNF resembles regular expressions but works on the level of tokens, not characters.
    Also, patterns (called rules or productions in BNF) are named, and may be recursive,
    i.e. use themselves as sub-patterns.

-}
module Hasql.TH.Syntax.Parsing where

import Hasql.TH.Prelude hiding (expr, try, option, some, many, sortBy, filter, head, tail, bit)
import HeadedMegaparsec hiding (string)
import Control.Applicative.Combinators hiding (some)
import Control.Applicative.Combinators.NonEmpty
import Hasql.TH.Extras.HeadedMegaparsec hiding (run)
import Hasql.TH.Syntax.Ast
import Text.Megaparsec (Stream, Parsec)
import qualified Hasql.TH.Extras.HeadedMegaparsec as Extras
import qualified Hasql.TH.Extras.NonEmpty as NonEmpty
import qualified Text.Megaparsec as Megaparsec
import qualified Text.Megaparsec.Char as MegaparsecChar
import qualified Text.Megaparsec.Char.Lexer as MegaparsecLexer
import qualified Hasql.TH.Syntax.HashSet as HashSet
import qualified Hasql.TH.Syntax.Predicate as Predicate
import qualified Hasql.TH.Syntax.Validator as Validator
import qualified Data.Text as Text
import qualified Data.List.NonEmpty as NonEmpty
import qualified Text.Builder as TextBuilder


{- $setup
>>> testParser parser = either putStr print . run parser
-}


type Parser = HeadedParsec Void Text


-- * Executors
-------------------------

run :: Parser a -> Text -> Either String a
run = Extras.run


-- * Helpers
-------------------------

commaSeparator :: Parser ()
commaSeparator = space *> char ',' *> endHead *> space

dotSeparator :: Parser ()
dotSeparator = space *> char '.' *> endHead *> space

inBrackets :: Parser a -> Parser a
inBrackets p = char '[' *> space *> p <* endHead <* space <* char ']'

inBracketsCont :: Parser a -> Parser (Parser a)
inBracketsCont p = char '[' *> endHead *> pure (space *> p <* endHead <* space <* char ']')

inParens :: Parser a -> Parser a
inParens p = char '(' *> space *> p <* endHead <* space <* char ')'

inParensCont :: Parser a -> Parser (Parser a)
inParensCont p = char '(' *> endHead *> pure (space *> p <* endHead <* space <* char ')')

inParensWithLabel :: (label -> content -> result) -> Parser label -> Parser content -> Parser result
inParensWithLabel _result _labelParser _contentParser = do
  _label <- wrapToHead _labelParser
  space
  char '('
  endHead
  space
  _content <- _contentParser
  space
  char ')'
  pure (_result _label _content)

inParensWithClause :: Parser clause -> Parser content -> Parser content
inParensWithClause = inParensWithLabel (const id)

trueIfPresent :: Parser a -> Parser Bool
trueIfPresent p = option False (True <$ p)

{-|
>>> testParser (quotedString '\'') "'abc''d'"
"abc'd"
-}
quotedString :: Char -> Parser Text
quotedString q = do
  char q
  endHead
  _tail <- parse $ let
    collectChunks !bdr = do
      chunk <- Megaparsec.takeWhileP Nothing (/= q)
      let bdr' = bdr <> TextBuilder.text chunk
      Megaparsec.try (consumeEscapedQuote bdr') <|> finish bdr'
    consumeEscapedQuote bdr = do
      MegaparsecChar.char q
      MegaparsecChar.char q
      collectChunks (bdr <> TextBuilder.char q)
    finish bdr = do
      MegaparsecChar.char q
      return (TextBuilder.run bdr)
    in collectChunks mempty
  return _tail

quasiQuote :: Parser a -> Parser a
quasiQuote p = space *> p <* endHead <* space <* eof


-- * PreparableStmt
-------------------------

preparableStmt = selectPreparableStmt

selectPreparableStmt = SelectPreparableStmt <$> selectStmt


-- * Select
-------------------------

{-|
>>> test = testParser selectStmt

>>> test "select"
...NormalSimpleSelect Nothing Nothing Nothing Nothing Nothing Nothing Nothing...

>>> test "select distinct 1"
...DistinctTargeting Nothing (ExprTarget (AexprConstExpr (IAexprConst 1)) :| [])...

>>> test "select $1"
...NormalTargeting (ExprTarget (PlaceholderExpr 1) :| [])...

>>> test "select $1 + $2"
...BinOpExpr "+" (PlaceholderExpr 1) (PlaceholderExpr 2)...

>>> test "select a, b"
...ExprTarget (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "a"))) :| [ExprTarget (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "b")))]...

>>> test "select $1 :: text"
...TypecastExpr (PlaceholderExpr 1) (TypecastTypename (UnquotedIdent "text") False 0 False)...

>>> test "select 1"
...ExprTarget (AexprConstExpr (IAexprConst 1))...

>>> test "select id"
...ExprTarget (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "id")))...

>>> test "select id from user"
1:20:
  |
1 | select id from user
  |                    ^
Reserved keyword "user" used as an identifier. If that's what you intend, you have to wrap it in double quotes.

>>> test "select id :: int4 from \"user\""
...TypecastExpr (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "id"))) (TypecastTypename (UnquotedIdent "int4") False 0 False)...
-}
selectStmt = Left <$> selectNoParens <|> Right <$> selectWithParens

selectWithParens = inParens (WithParensSelectWithParens <$> selectWithParens <|> NoParensSelectWithParens <$> selectNoParens)

selectNoParens = withSelectNoParens <|> simpleSelectNoParens

sharedSelectNoParens _with = do
  _select <- selectClause
  _sort <- optional (space1 *> sortClause)
  _limit <- optional (space1 *> selectLimit)
  _forLocking <- optional (space1 *> forLockingClause)
  return (SelectNoParens _with _select _sort _limit _forLocking)

{-|
The one that doesn't start with \"WITH\".
-}
{-
  | simple_select
  | select_clause sort_clause
  | select_clause opt_sort_clause for_locking_clause opt_select_limit
  | select_clause opt_sort_clause select_limit opt_for_locking_clause
-}
simpleSelectNoParens = sharedSelectNoParens Nothing

withSelectNoParens = do
  _with <- withClause
  space1
  sharedSelectNoParens (Just _with)

selectClause = suffixRec base suffix where
  base = asum [
      Right <$> selectWithParens,
      Left <$> baseSimpleSelect
    ]
  suffix a = Left <$> extensionSimpleSelect a

{-
simple_select:
  |  SELECT opt_all_clause opt_target_list
      into_clause from_clause where_clause
      group_clause having_clause window_clause
  |  SELECT distinct_clause target_list
      into_clause from_clause where_clause
      group_clause having_clause window_clause
  |  values_clause
  |  TABLE relation_expr
  |  select_clause UNION all_or_distinct select_clause
  |  select_clause INTERSECT all_or_distinct select_clause
  |  select_clause EXCEPT all_or_distinct select_clause
-}

baseSimpleSelect = asum [
    do
      string' "select"
      parse $ Megaparsec.notFollowedBy $ Megaparsec.satisfy $ isAlphaNum
      endHead
      _targeting <- optional (space1 *> targeting)
      _intoClause <- optional (space1 *> string' "into" *> endHead *> space1 *> optTempTableName)
      _fromClause <- optional (space1 *> string' "from" *> endHead *> space1 *> sep1 commaSeparator tableRef)
      _whereClause <- optional (space1 *> string' "where" *> endHead *> space1 *> aExpr)
      _groupClause <- optional (space1 *> keyphrase "group by" *> endHead *> space1 *> sep1 commaSeparator groupByItem)
      _havingClause <- optional (space1 *> string' "having" *> endHead *> space1 *> aExpr)
      _windowClause <- optional (space1 *> string' "window" *> endHead *> space1 *> sep1 commaSeparator windowDefinition)
      return (NormalSimpleSelect _targeting _intoClause _fromClause _whereClause _groupClause _havingClause _windowClause)
    ,
    ValuesSimpleSelect <$> valuesClause
  ]

extensionSimpleSelect _headSelectClause = do
  _op <- space1 *> selectBinOp <* space1
  endHead
  _allOrDistinct <- optional (allOrDistinct <* space1)
  _selectClause <- selectClause
  return (BinSimpleSelect _op _headSelectClause _allOrDistinct _selectClause)
  
allOrDistinct = string' "all" $> False <|> string' "distinct" $> True

selectBinOp = asum [
    string' "union" $> UnionSelectBinOp,
    string' "intersect" $> IntersectSelectBinOp,
    string' "except" $> ExceptSelectBinOp
  ]

valuesClause = do
  string' "values"
  space
  sep1 commaSeparator $ do
    char '('
    endHead
    space
    _a <- sep1 commaSeparator aExpr
    space
    char ')'
    return _a

withClause = label "with clause" $ do
  string' "with"
  space1
  endHead
  _recursive <- option False (True <$ string' "recursive" <* space1)
  _cteList <- sep1 commaSeparator commonTableExpr
  return (WithClause _recursive _cteList)

commonTableExpr = label "common table expression" $ do
  _name <- colId <* space <* endHead
  _nameList <- optional (inParens (sep1 commaSeparator colId) <* space1)
  string' "as"
  space1
  _materialized <- optional (materialized <* space1)
  _stmt <- inParens preparableStmt
  return (CommonTableExpr _name _nameList _materialized _stmt)

materialized =
  True <$ string' "materialized" <|>
  False <$ keyphrase "not materialized"

{-
simple_select:
  |  SELECT opt_all_clause opt_target_list
      into_clause from_clause where_clause
      group_clause having_clause window_clause
  |  SELECT distinct_clause target_list
      into_clause from_clause where_clause
      group_clause having_clause window_clause

distinct_clause:
  |  DISTINCT
  |  DISTINCT ON '(' expr_list ')'
-}
targeting = distinct <|> allWithTargetList <|> all <|> normal where
  normal = NormalTargeting <$> targetList
  allWithTargetList = do
    string' "all"
    space1
    AllTargeting <$> Just <$> targetList
  all = string' "all" $> AllTargeting Nothing
  distinct = do
    string' "distinct"
    space1
    endHead
    _optOn <- optional (onExpressionsClause <* space1)
    _targetList <- targetList
    return (DistinctTargeting _optOn _targetList)

targetList = sep1 commaSeparator target

{-|
>>> testParser target "a.b as c"
AliasedExprTarget (QualifiedNameExpr (IndirectedQualifiedName (UnquotedIdent "a") (AttrNameIndirectionEl (UnquotedIdent "b") :| []))) (UnquotedIdent "c")
-}
{-
target_el:
  |  a_expr AS ColLabel
  |  a_expr IDENT
  |  a_expr
  |  '*'
-}
target = label "target" $ asum [
    do
      _expr <- aExpr
      asum [
          do
            space1
            asum [
                AliasedExprTarget _expr <$> (string' "as" *> space1 *> endHead *> colLabel)
                ,
                ImplicitlyAliasedExprTarget _expr <$> ident
              ]
          ,
          pure (ExprTarget _expr)
        ]
    ,
    AsteriskTarget <$ char '*'
  ]

onExpressionsClause = do
  string' "on"
  space1
  endHead
  inParens (sep1 commaSeparator aExpr)


-- * Into clause details
-------------------------

{-
OptTempTableName:
  | TEMPORARY opt_table qualified_name
  | TEMP opt_table qualified_name
  | LOCAL TEMPORARY opt_table qualified_name
  | LOCAL TEMP opt_table qualified_name
  | GLOBAL TEMPORARY opt_table qualified_name
  | GLOBAL TEMP opt_table qualified_name
  | UNLOGGED opt_table qualified_name
  | TABLE qualified_name
  | qualified_name
-}
optTempTableName = asum [
    do
      a <- asum [
          TemporaryOptTempTableName <$ string' "temporary" <* space1,
          TempOptTempTableName <$ string' "temp" <* space1,
          LocalTemporaryOptTempTableName <$ string' "local temporary" <* space1,
          LocalTempOptTempTableName <$ string' "local temp" <* space1,
          GlobalTemporaryOptTempTableName <$ string' "global temporary" <* space1,
          GlobalTempOptTempTableName <$ string' "global temp" <* space1,
          UnloggedOptTempTableName <$ string' "unlogged" <* space1
        ]
      b <- option False (True <$ string' "table" <* space1)
      c <- qualifiedName
      return (a b c)
    ,
    do
      string' "table"
      space1
      endHead
      TableOptTempTableName <$> qualifiedName
    ,
    QualifedOptTempTableName <$> qualifiedName
  ]


-- * Group by details
-------------------------

groupByItem = asum [
    EmptyGroupingSetGroupByItem <$ (char '(' *> space *> char ')'),
    RollupGroupByItem <$> (string' "rollup" *> endHead *> space *> inParens (sep1 commaSeparator aExpr)),
    CubeGroupByItem <$> (string' "cube" *> endHead *> space *> inParens (sep1 commaSeparator aExpr)),
    GroupingSetsGroupByItem <$> (keyphrase "grouping sets" *> endHead *> space *> inParens (sep1 commaSeparator groupByItem)),
    ExprGroupByItem <$> aExpr
  ]


-- * Window clause details
-------------------------

windowDefinition = WindowDefinition <$> (colId <* space1 <* string' "as" <* space1 <* endHead) <*> windowSpecification

{-
window_specification:
  |  '(' opt_existing_window_name opt_partition_clause
            opt_sort_clause opt_frame_clause ')'
-}
windowSpecification = inParens $ asum [
    do
      a <- frameClause
      return (WindowSpecification Nothing Nothing Nothing (Just a))
    ,
    do
      a <- sortClause
      b <- optional (space1 *> frameClause)
      return (WindowSpecification Nothing Nothing (Just a) b)
    ,
    do
      a <- partitionByClause
      b <- optional (space1 *> sortClause)
      c <- optional (space1 *> frameClause)
      return (WindowSpecification Nothing (Just a) b c)
    ,
    do
      a <- colId
      b <- optional (space1 *> partitionByClause)
      c <- optional (space1 *> sortClause)
      d <- optional (space1 *> frameClause)
      return (WindowSpecification (Just a) b c d)
    ,
    pure (WindowSpecification Nothing Nothing Nothing Nothing)
  ]

partitionByClause = keyphrase "partition by" *> space1 *> endHead *> sep1 commaSeparator aExpr

{-
opt_frame_clause:
  |  RANGE frame_extent opt_window_exclusion_clause
  |  ROWS frame_extent opt_window_exclusion_clause
  |  GROUPS frame_extent opt_window_exclusion_clause
  |  EMPTY
-}
frameClause = do
  a <- frameClauseMode <* space1 <* endHead
  b <- frameExtent
  c <- optional (space1 *> windowExclusionClause)
  return (FrameClause a b c)

frameClauseMode = asum [
    RangeFrameClauseMode <$ string' "range",
    RowsFrameClauseMode <$ string' "rows",
    GroupsFrameClauseMode <$ string' "groups"
  ]

frameExtent =
  BetweenFrameExtent <$> (string' "between" *> space1 *> endHead *> frameBound <* space1 <* string' "and" <* space1) <*> frameBound <|>
  SingularFrameExtent <$> frameBound

{-
  |  UNBOUNDED PRECEDING
  |  UNBOUNDED FOLLOWING
  |  CURRENT_P ROW
  |  a_expr PRECEDING
  |  a_expr FOLLOWING
-}
frameBound =
  UnboundedPrecedingFrameBound <$ keyphrase "unbounded preceding" <|>
  UnboundedFollowingFrameBound <$ keyphrase "unbounded following" <|>
  CurrentRowFrameBound <$ keyphrase "current row" <|>
  do
    a <- aExpr
    space1
    PrecedingFrameBound a <$ string' "preceding" <|> FollowingFrameBound a <$ string' "following"

windowExclusionClause =
  CurrentRowWindowExclusionClause <$ keyphrase "exclude current row" <|>
  GroupWindowExclusionClause <$ keyphrase "exclude group" <|>
  TiesWindowExclusionClause <$ keyphrase "exclude ties" <|>
  NoOthersWindowExclusionClause <$ keyphrase "exclude no others"


-- * Table refs
-------------------------

{-|
>>> testParser tableRef "a left join b "
...
expecting "on", "using", or white space

>>> testParser tableRef "a left join b on (a.i = b.i)"
JoinTableRef (MethJoinedTable (QualJoinMeth...

-}
{-
| relation_expr opt_alias_clause
| relation_expr opt_alias_clause tablesample_clause
| func_table func_alias_clause
| LATERAL_P func_table func_alias_clause
| xmltable opt_alias_clause
| LATERAL_P xmltable opt_alias_clause
| select_with_parens opt_alias_clause
| LATERAL_P select_with_parens opt_alias_clause
| joined_table
| '(' joined_table ')' alias_clause

TODO: Add support for missing cases.
-}
tableRef = label "table reference" $ do
  _tr <- nonTrailingTableRef
  (space1 *> trailingTableRef _tr) <|> pure _tr

nonTrailingTableRef = asum [
    relationExprTableRef <|>
    lateralTableRef <|>
    wrapToHead nonLateralTableRef <|>
    joinedTableWithAliasTableRef <|>
    inParensJoinedTableTableRef
  ]
  where
    
    {-
    | relation_expr opt_alias_clause
    | relation_expr opt_alias_clause tablesample_clause

    TODO: Add support for TABLESAMPLE.
    -}
    relationExprTableRef = do
      _relationExpr <- relationExpr
      endHead
      _optAliasClause <- optional $ space1 *> aliasClause
      return (RelationExprTableRef _relationExpr _optAliasClause)

    {-
    | LATERAL_P func_table func_alias_clause
    | LATERAL_P xmltable opt_alias_clause
    | LATERAL_P select_with_parens opt_alias_clause
    -}
    lateralTableRef = do
      string' "lateral"
      endHead
      space1
      selectWithParensTableRef True

    nonLateralTableRef = selectWithParensTableRef False

    selectWithParensTableRef _lateral = do
      _select <- selectWithParens
      _optAliasClause <- optional $ space1 *> aliasClause
      return (SelectTableRef _lateral _select _optAliasClause)

    inParensJoinedTableTableRef = JoinTableRef <$> inParensJoinedTable <*> pure Nothing

    joinedTableWithAliasTableRef = do
      _joinedTable <- wrapToHead (inParens joinedTable)
      space1
      _alias <- aliasClause
      return (JoinTableRef _joinedTable (Just _alias))

trailingTableRef _tableRef =
  JoinTableRef <$> trailingJoinedTable _tableRef <*> pure Nothing

{-
| qualified_name
| qualified_name '*'
| ONLY qualified_name
| ONLY '(' qualified_name ')'
-}
relationExpr =
  label "relation expression" $
  asum
    [
      do
        string' "only"
        space1
        _name <- qualifiedName
        return (OnlyRelationExpr _name False) 
      ,
      inParensWithClause (string' "only") qualifiedName <&> \ a -> OnlyRelationExpr a True
      ,
      do
        _name <- qualifiedName
        _asterisk <- asum
          [
            True <$ (space1 *> char '*'),
            pure False
          ]
        return (SimpleRelationExpr _name _asterisk)
    ]

joinedTable =
  asum [
      do
        _tr1 <- wrapToHead nonTrailingTableRef
        space1
        trailingJoinedTable _tr1
      ,
      inParensJoinedTable
    ]

{-
  | '(' joined_table ')'
-}
inParensJoinedTable = InParensJoinedTable <$> inParens joinedTable

{-
  | table_ref CROSS JOIN table_ref
  | table_ref join_type JOIN table_ref join_qual
  | table_ref JOIN table_ref join_qual
  | table_ref NATURAL join_type JOIN table_ref
  | table_ref NATURAL JOIN table_ref
-}
trailingJoinedTable _tr1 = asum [
    do
      keyphrase "cross join"
      endHead
      space1
      _tr2 <- tableRef
      return (MethJoinedTable CrossJoinMeth _tr1 _tr2)
    ,
    do
      _jt <- joinTypedJoin
      endHead
      space1
      _tr2 <- tableRef
      space1
      _jq <- joinQual
      return (MethJoinedTable (QualJoinMeth _jt _jq) _tr1 _tr2)
    ,
    do
      string' "natural"
      endHead
      space1
      _jt <- joinTypedJoin
      space1
      _tr2 <- tableRef
      return (MethJoinedTable (NaturalJoinMeth _jt) _tr1 _tr2)
  ]
  where
    joinTypedJoin =
      Just <$> (joinType <* endHead <* space1 <* string' "join") <|>
      Nothing <$ string' "join"

joinType = asum [
    do
      string' "full"
      endHead
      _outer <- outerAfterSpace
      return (FullJoinType _outer)
    ,
    do
      string' "left"
      endHead
      _outer <- outerAfterSpace
      return (LeftJoinType _outer)
    ,
    do
      string' "right"
      endHead
      _outer <- outerAfterSpace
      return (RightJoinType _outer)
    ,
    string' "inner" $> InnerJoinType
  ]
  where
    outerAfterSpace = (space1 *> string' "outer") $> True <|> pure False

joinQual = asum [
    string' "using" *> space1 *> inParens (sep1 commaSeparator colId) <&> UsingJoinQual
    ,
    string' "on" *> space1 *> aExpr <&> OnJoinQual
  ]

{-
alias_clause:
  |  AS ColId '(' name_list ')'
  |  AS ColId
  |  ColId '(' name_list ')'
  |  ColId
name_list:
  |  name
  |  name_list ',' name
name:
  |  ColId
-}
aliasClause = do
  _alias <- (string' "as" *> space1 *> endHead *> colId) <|> colId
  _columnAliases <- optional (space1 *> inParens (sep1 commaSeparator colId))
  return (AliasClause _alias _columnAliases)


-- * Sorting
-------------------------

sortClause = do
  keyphrase "order by"
  endHead
  space1
  a <- sep1 commaSeparator sortBy
  return a

sortBy = do
  _expr <- aExpr
  _optOrder <- optional (space1 *> order)
  return (SortBy _expr _optOrder)

order = string' "asc" $> AscOrder <|> string' "desc" $> DescOrder


-- * Expressions
-------------------------

exprList = sep1 commaSeparator aExpr

exprListInParens = inParens exprList

{-|
Notice that the tree constructed by this parser does not reflect
the precedence order of Postgres.
For the purposes of this library it simply doesn't matter,
so we're not bothering with that.

Composite on the right:
>>> testParser aExpr "$1 = $2 :: int4"
BinOpExpr "=" (PlaceholderExpr 1) (TypecastExpr (PlaceholderExpr 2) (TypecastTypename (UnquotedIdent "int4") False 0 False))

Composite on the left:
>>> testParser aExpr "$1 = $2 :: int4 and $3"
BinOpExpr "=" (PlaceholderExpr 1) (BinOpExpr "AND" (TypecastExpr (PlaceholderExpr 2) (TypecastTypename (UnquotedIdent "int4") False 0 False)) (PlaceholderExpr 3))
-}
aExpr = suffixRec base suffix where
  base = asum [
      DefaultAExpr <$ string' "default",
      UniqueAExpr <$> (string' "unique" *> space1 *> selectWithParens),
      OverlapsAExpr <$> wrapToHead row <*> (space1 *> string' "overlaps" *> space1 *> endHead *> row),
      qualOpExpr aExpr PrefixQualOpAExpr,
      PlusAExpr <$> plusedExpr aExpr,
      MinusAExpr <$> minusedExpr aExpr,
      NotAExpr <$> (string' "not" *> space1 *> aExpr),
      CExprAExpr <$> cExpr
    ]
  suffix a = asum [
      do
        space1
        b <- wrapToHead subqueryOp
        space1
        c <- wrapToHead subType
        space
        d <- Left <$> wrapToHead selectWithParens <|> Right <$> inParens aExpr
        return (SubqueryAExpr a b c d)
      ,
      typecastExpr a TypecastAExpr
      ,
      CollateAExpr a <$> (space1 *> string' "collate" *> space1 *> endHead *> anyName)
      ,
      AtTimeZoneAExpr a <$> (space1 *> keyphrase "at time zone" *> space1 *> endHead *> aExpr)
      ,
      symbolicBinOpExpr a aExpr SymbolicBinOpAExpr
      ,
      SuffixQualOpAExpr a <$> (space *> qualOp)
      ,
      AndAExpr a <$> (space1 *> string' "and" *> space1 *> endHead *> aExpr)
      ,
      OrAExpr a <$> (space1 *> string' "or" *> space1 *> endHead *> aExpr)
      ,
      do
        space1
        b <- trueIfPresent (string' "not" *> space1)
        c <- asum [
            LikeVerbalExprBinOp <$ string' "like",
            IlikeVerbalExprBinOp <$ string' "ilike",
            SimilarToVerbalExprBinOp <$ keyphrase "similar to"
          ]
        space1
        endHead
        d <- aExpr
        e <- optional (space1 *> string' "escape" *> space1 *> endHead *> aExpr)
        return (VerbalExprBinOpAExpr a b c d e)
      ,
      do
        space1
        string' "is"
        space1
        endHead
        b <- trueIfPresent (string' "not" *> space1)
        c <- asum [
            NullAExprReversableOp <$ string' "null",
            TrueAExprReversableOp <$ string' "true",
            FalseAExprReversableOp <$ string' "false",
            UnknownAExprReversableOp <$ string' "unknown",
            DistinctFromAExprReversableOp <$> (string' "distinct" *> space1 *> string' "from" *> space1 *> endHead *> aExpr),
            OfAExprReversableOp <$> (string' "of" *> space1 *> endHead *> inParens typeList),
            DocumentAExprReversableOp <$ string' "document"
          ]
        return (ReversableOpAExpr a b c)
      ,
      do
        space1
        b <- trueIfPresent (string' "not" *> space1)
        string' "between"
        space1
        endHead
        c <- asum [
            BetweenSymmetricAExprReversableOp <$ (string' "symmetric" *> space1),
            BetweenAExprReversableOp True <$ (string' "asymmetric" *> space1),
            pure (BetweenAExprReversableOp False)
          ]
        d <- bExpr
        space1
        string' "and"
        space1
        e <- aExpr
        return (ReversableOpAExpr a b (c d e))
      ,
      do
        space1
        b <- trueIfPresent (string' "not" *> space1)
        string' "in"
        space
        c <- InAExprReversableOp <$> inExpr
        return (ReversableOpAExpr a b c)
      ,
      IsnullAExpr a <$ (space1 *> string' "isnull")
      ,
      NotnullAExpr a <$ (space1 *> string' "notnull")
    ]

bExpr = suffixRec base suffix where
  base = asum [
      qualOpExpr bExpr QualOpBExpr,
      PlusBExpr <$> plusedExpr bExpr,
      MinusBExpr <$> minusedExpr bExpr,
      CExprBExpr <$> cExpr
    ]
  suffix a = asum [
      typecastExpr a TypecastBExpr,
      symbolicBinOpExpr a bExpr SymbolicBinOpBExpr,
      do
        space1
        string' "is"
        space1
        endHead
        b <- trueIfPresent (string' "not" *> space1)
        c <- asum [
            DistinctFromBExprIsOp <$> (keyphrase "distinct from" *> space1 *> endHead *> bExpr),
            OfBExprIsOp <$> (string' "of" *> space1 *> endHead *> inParens typeList),
            DocumentBExprIsOp <$ string' "document"
          ]
        return (IsOpBExpr a b c)
    ]

cExpr = asum [
    ParamCExpr <$> (char '$' *> decimal <* endHead) <*> optional (space *> indirection)
    ,
    CaseCExpr <$> caseExpr
    ,
    ImplicitRowCExpr <$> implicitRow
    ,
    ExplicitRowCExpr <$> explicitRow
    ,
    inParensWithClause (string' "grouping") (GroupingCExpr <$> sep1 commaSeparator aExpr)
    ,
    string' "exists" *> space *> (ExistsCExpr <$> selectWithParens)
    ,
    do
      string' "array"
      space
      join $ asum [
          fmap (fmap (ArrayCExpr . Right)) arrayExprCont,
          fmap (fmap (ArrayCExpr . Left) . pure) selectWithParens
        ]
    ,
    do
      a <- wrapToHead selectWithParens
      endHead
      b <- optional (space *> indirection)
      return (SelectWithParensCExpr a b)
    ,
    InParensCExpr <$> (inParens aExpr <* endHead) <*> optional (space *> indirection)
    ,
    AexprConstCExpr <$> wrapToHead aexprConst
    ,
    FuncCExpr <$> funcExpr
    ,
    ColumnrefCExpr <$> columnref
  ]


-- *
-------------------------

subqueryOp = asum [
    AnySubqueryOp <$> (string' "operator" *> space *> endHead *> inParens anyOperator)
    ,
    do
      a <- trueIfPresent (string' "not" *> space1)
      LikeSubqueryOp a <$ string' "like" <|> IlikeSubqueryOp a <$ string' "ilike"
    ,
    AllSubqueryOp <$> allOp
  ]

subType = asum [
    AnySubType <$ string' "any",
    SomeSubType <$ string' "some",
    AllSubType <$ string' "all"
  ]

inExpr = SelectInExpr <$> selectWithParens <|> ExprListInExpr <$> inParens exprList

symbolicBinOpExpr _a _bParser _constr = do
  _binOp <- label "binary operator" (space *> wrapToHead symbolicExprBinOp <* space)
  _b <- _bParser
  return (_constr _a _binOp _b)

typecastExpr _prefix _constr = do
  space
  string "::"
  endHead
  space
  _type <- typecastTypename
  return (_constr _prefix _type)

plusedExpr expr = char '+' *> space *> expr

minusedExpr expr = char '-' *> space *> expr

qualOpExpr expr constr = constr <$> wrapToHead qualOp <*> (space *> expr)

row = ExplicitRowRow <$> explicitRow <|> ImplicitRowRow <$> implicitRow

explicitRow = string' "row" *> space *> inParens (optional exprList)

implicitRow = inParens $ do
  a <- wrapToHead aExpr
  commaSeparator
  b <- exprList
  return $ case NonEmpty.consAndUnsnoc a b of
    (c, d) -> ImplicitRow c d

arrayExprCont = inBracketsCont $ asum [
    ArrayExprListArrayExpr <$> sep1 commaSeparator (join arrayExprCont),
    ExprListArrayExpr <$> exprList,
    pure EmptyArrayExpr
  ]

{-|
Full specification:

>>> testParser caseExpr "CASE WHEN a = b THEN c WHEN d THEN e ELSE f END"
CaseExpr Nothing (WhenClause (BinOpExpr "=" (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "a"))) (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "b")))) (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "c"))) :| [WhenClause (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "d"))) (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "e")))]) (Just (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "f"))))

Implicit argument:

>>> testParser caseExpr "CASE a WHEN b THEN c ELSE d END"
CaseExpr (Just (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "a")))) (WhenClause (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "b"))) (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "c"))) :| []) (Just (QualifiedNameExpr (SimpleQualifiedName (UnquotedIdent "d"))))
-}
caseExpr = label "case expression" $ do
  string' "case"
  space1
  endHead
  _arg <- optional (aExpr <* space1)
  _whenClauses <- sep1 space1 whenClause
  space1
  _default <- optional elseClause
  string' "end"
  pure $ CaseExpr _arg _whenClauses _default

whenClause = do
  string' "when"
  space1
  endHead
  _a <- aExpr
  space1
  string' "then"
  space1
  _b <- aExpr
  return (WhenClause _a _b)

elseClause = do
  string' "else"
  space1
  endHead
  a <- aExpr
  space1
  return a

funcExpr = asum [
    SubexprFuncExpr <$> funcExprCommonSubExpr,
    do
      a <- funcApplication
      endHead
      b <- optional (space1 *> withinGroupClause)
      c <- optional (space1 *> filterClause)
      d <- optional (space1 *> overClause)
      return (ApplicationFuncExpr a b c d)
  ]

withinGroupClause = do
  keyphrase "within group"
  endHead
  space
  inParens sortClause

filterClause = do
  string' "filter"
  endHead
  space
  inParens (string' "where" *> space1 *> aExpr)

overClause = do
  string' "over"
  space1
  endHead
  asum [
      WindowOverClause <$> windowSpecification,
      ColIdOverClause <$> colId
    ]

funcExprCommonSubExpr = asum [
    CollationForFuncExprCommonSubExpr <$> (inParensWithClause (keyphrase "collation for") aExpr)
    ,
    CurrentDateFuncExprCommonSubExpr <$ string' "current_date"
    ,
    CurrentTimestampFuncExprCommonSubExpr <$> labeledIconst "current_timestamp"
    ,
    CurrentTimeFuncExprCommonSubExpr <$> labeledIconst "current_time"
    ,
    LocalTimestampFuncExprCommonSubExpr <$> labeledIconst "localtimestamp"
    ,
    LocalTimeFuncExprCommonSubExpr <$> labeledIconst "localtime"
    ,
    CurrentRoleFuncExprCommonSubExpr <$ string' "current_role"
    ,
    CurrentUserFuncExprCommonSubExpr <$ string' "current_user"
    ,
    SessionUserFuncExprCommonSubExpr <$ string' "session_user"
    ,
    UserFuncExprCommonSubExpr <$ string' "user"
    ,
    CurrentCatalogFuncExprCommonSubExpr <$ string' "current_catalog"
    ,
    CurrentSchemaFuncExprCommonSubExpr <$ string' "current_schema"
    ,
    inParensWithClause (string' "cast") (CastFuncExprCommonSubExpr <$> aExpr <*> (space1 *> string' "as" *> space1 *> typename))
    ,
    inParensWithClause (string' "extract") (ExtractFuncExprCommonSubExpr <$> optional extractList)
    ,
    inParensWithClause (string' "overlay") (OverlayFuncExprCommonSubExpr <$> overlayList)
    ,
    inParensWithClause (string' "position") (PositionFuncExprCommonSubExpr <$> optional positionList)
    ,
    inParensWithClause (string' "substring") (SubstringFuncExprCommonSubExpr <$> optional substrList)
    ,
    inParensWithClause (string' "treat") (TreatFuncExprCommonSubExpr <$> aExpr <*> (space1 *> string' "as" *> space1 *> typename))
    ,
    inParensWithClause (string' "trim") (TrimFuncExprCommonSubExpr <$> optional (trimModifier <* space1) <*> trimList)
    ,
    inParensWithClause (string' "nullif") (NullIfFuncExprCommonSubExpr <$> aExpr <*> (commaSeparator *> aExpr))
    ,
    inParensWithClause (string' "coalesce") (CoalesceFuncExprCommonSubExpr <$> exprList)
    ,
    inParensWithClause (string' "greatest") (GreatestFuncExprCommonSubExpr <$> exprList)
    ,
    inParensWithClause (string' "least") (LeastFuncExprCommonSubExpr <$> exprList)
  ]
  where
    labeledIconst _label = string' _label *> endHead *> optional (space *> inParens iconst)

extractList = ExtractList <$> extractArg <*> (space1 *> string' "FROM" *> space1 *> aExpr)

extractArg = asum [
    YearExtractArg <$ string' "year",
    MonthExtractArg <$ string' "month",
    DayExtractArg <$ string' "day",
    HourExtractArg <$ string' "hour",
    MinuteExtractArg <$ string' "minute",
    SecondExtractArg <$ string' "second",
    SconstExtractArg <$> sconst,
    IdentExtractArg <$> ident
  ]

overlayList = do
  a <- aExpr
  space1
  b <- overlayPlacing
  space1
  c <- substrFrom
  d <- optional (space1 *> substrFor)
  return (OverlayList a b c d)

overlayPlacing = string' "placing" *> space1 *> endHead *> aExpr

positionList = PositionList <$> bExpr <*> (space1 *> string' "IN" *> space1 *> bExpr)

substrList = asum [
    ExprSubstrList <$> wrapToHead aExpr <*> (space1 *> substrListFromFor),
    ExprListSubstrList <$> exprList
  ]

substrListFromFor = asum [
    do
      a <- substrFrom
      asum [
          do
            b <- space1 *> substrFor
            return (FromForSubstrListFromFor a b)
          ,
          return (FromSubstrListFromFor a)
        ]
    ,
    do
      a <- substrFor
      asum [
          do
            b <- space1 *> substrFrom
            return (ForFromSubstrListFromFor a b)
          ,
          return (ForSubstrListFromFor a)
        ]
  ]

substrFrom = string' "from" *> space1 *> endHead *> aExpr

substrFor = string' "for" *> space1 *> endHead *> aExpr

trimModifier =
  BothTrimModifier <$ string' "both" <|>
  LeadingTrimModifier <$ string' "leading" <|>
  TrailingTrimModifier <$ string' "trailing"

trimList = asum [
    ExprFromExprListTrimList <$> wrapToHead aExpr <*> (space1 *> string' "from" *> space1 *> endHead *> exprList)
    ,
    FromExprListTrimList <$> (string' "from" *> space1 *> endHead *> exprList)
    ,
    ExprListTrimList <$> exprList
  ]

funcApplication = inParensWithLabel FuncApplication funcName (optional funcApplicationParams)

funcApplicationParams =
  asum
    [
      starFuncApplicationParams,
      listVariadicFuncApplicationParams,
      singleVariadicFuncApplicationParams,
      normalFuncApplicationParams
    ]

normalFuncApplicationParams = do
  _optAllOrDistinct <- optional (allOrDistinct <* space1)
  _argList <- sep1 commaSeparator funcArgExpr
  endHead
  _optSortClause <- optional (space1 *> sortClause)
  return (NormalFuncApplicationParams _optAllOrDistinct _argList _optSortClause)

singleVariadicFuncApplicationParams = do
  string' "variadic"
  space1
  endHead
  _arg <- funcArgExpr
  _optSortClause <- optional (space1 *> sortClause)
  return (VariadicFuncApplicationParams Nothing _arg _optSortClause)

listVariadicFuncApplicationParams = do
  (_argList, _) <- wrapToHead $ sepEnd1 commaSeparator (string' "variadic" <* space1) funcArgExpr
  endHead
  _arg <- funcArgExpr
  _optSortClause <- optional (space1 *> sortClause)
  return (VariadicFuncApplicationParams (Just _argList) _arg _optSortClause)

starFuncApplicationParams = space *> char '*' *> endHead *> space $> StarFuncApplicationParams

{-
func_arg_expr:
  | a_expr
  | param_name COLON_EQUALS a_expr
  | param_name EQUALS_GREATER a_expr
param_name:
  | type_function_name
-}
funcArgExpr = asum [
    do
      a <- wrapToHead typeFunctionName
      space
      asum [
          do
            string ":="
            endHead
            b <- space *> aExpr
            return (ColonEqualsFuncArgExpr a b)
          ,
          do
            string "=>"
            endHead
            b <- space *> aExpr
            return (EqualsGreaterFuncArgExpr a b)
        ]
    ,
    ExprFuncArgExpr <$> aExpr
  ]


-- * Ops
-------------------------

symbolicExprBinOp =
  QualSymbolicExprBinOp <$> qualOp <|>
  MathSymbolicExprBinOp <$> mathOp

lexicalExprBinOp = asum $ fmap keyphrase $ ["and", "or", "is distinct from", "is not distinct from"]

qualOp = asum [
    OpQualOp <$> op,
    OperatorQualOp <$> inParensWithClause (string' "operator") anyOperator
  ]

op = do
  a <- takeWhile1P Nothing Predicate.opChar
  case Validator.op a of
    Nothing -> return a
    Just err -> fail (Text.unpack err)

anyOperator = asum [
    AllOpAnyOperator <$> allOp,
    QualifiedAnyOperator <$> colId <*> (space *> char '.' *> space *> anyOperator)
  ]

allOp = asum [
    OpAllOp <$> op,
    MathAllOp <$> mathOp
  ]

mathOp = asum [
    ArrowLeftArrowRightMathOp <$ string' "<>",
    GreaterEqualsMathOp <$ string' ">=",
    ExclamationEqualsMathOp <$ string' "!=",
    LessEqualsMathOp <$ string' "<=",
    PlusMathOp <$ char '+',
    MinusMathOp <$ char '-',
    AsteriskMathOp <$ char '*',
    SlashMathOp <$ char '/',
    PercentMathOp <$ char '%',
    ArrowUpMathOp <$ char '^',
    ArrowLeftMathOp <$ char '<',
    ArrowRightMathOp <$ char '>',
    EqualsMathOp <$ char '='
  ]


-- * Constants
-------------------------

{-|
>>> testParser aexprConst "32948023849023"
IAexprConst 32948023849023

>>> testParser aexprConst "'abc''de'"
SAexprConst "abc'de"

>>> testParser aexprConst "23.43234"
FAexprConst 23.43234

>>> testParser aexprConst "32423423.324324872"
FAexprConst 3.2423423324324872e7

>>> testParser aexprConst "NULL"
NullAexprConst
-}
{-
AexprConst: Iconst
      | FCONST
      | Sconst
      | BCONST
      | XCONST
      | func_name Sconst
      | func_name '(' func_arg_list opt_sort_clause ')' Sconst
      | ConstTypename Sconst
      | ConstInterval Sconst opt_interval
      | ConstInterval '(' Iconst ')' Sconst
      | TRUE_P
      | FALSE_P
      | NULL_P
-}
aexprConst = asum [
    do
      string' "interval"
      space1
      endHead
      a <- asum [
          do
            a <- sconst
            endHead
            b <- optional (space1 *> interval)
            return (StringIntervalAexprConst a b)
          ,
          do
            a <- inParens iconst
            space1
            endHead
            b <- sconst
            return (IntIntervalAexprConst a b)
        ]
      return a
    ,
    do
      a <- constTypename
      space1
      endHead
      b <- sconst
      return (ConstTypenameAexprConst a b)
    ,
    BoolAexprConst True <$ string' "true"
    ,
    BoolAexprConst False <$ string' "false"
    ,
    NullAexprConst <$ string' "null" <* parse (Megaparsec.notFollowedBy MegaparsecChar.alphaNumChar)
    ,
    either IAexprConst FAexprConst <$> iconstOrFconst
    ,
    SAexprConst <$> sconst
    ,
    label "bit literal" $ do
      string' "b'"
      endHead
      a <- takeWhile1P (Just "0 or 1") (\ b -> b == '0' || b == '1')
      char '\''
      return (BAexprConst a)
    ,
    label "hex literal" $ do
      string' "x'"
      endHead
      a <- takeWhile1P (Just "Hex digit") (Predicate.inSet HashSet.hexDigitChars)
      char '\''
      return (XAexprConst a)
    ,
    wrapToHead $ do
      a <- funcName
      space
      char '('
      space
      b <- sep1 commaSeparator funcArgExpr
      c <- optional (space1 *> sortClause)
      space
      char ')'
      space1
      d <- sconst
      return (FuncAexprConst a (Just (FuncConstArgs b c)) d)
    ,
    FuncAexprConst <$> (wrapToHead funcName <* space1) <*> pure Nothing <*> sconst
  ]

iconstOrFconst = Right <$> fconst <|> Left <$> iconst

iconst = decimal

fconst = float

sconst = quotedString '\''

constTypename = asum [
    NumericConstTypename <$> numeric,
    ConstBitConstTypename <$> constBit,
    ConstCharacterConstTypename <$> constCharacter,
    ConstDatetimeConstTypename <$> constDatetime
  ]

numeric = asum [
    IntegerNumeric <$ string' "integer",
    IntNumeric <$ string' "int",
    SmallintNumeric <$ string' "smallint",
    BigintNumeric <$ string' "bigint",
    RealNumeric <$ string' "real",
    FloatNumeric <$> (string' "float" *> endHead *> optional (space *> inParens iconst)),
    DoublePrecisionNumeric <$ keyphrase "double precision",
    DecimalNumeric <$> (string' "decimal" *> endHead *> optional (space *> exprListInParens)),
    DecNumeric <$> (string' "dec" *> endHead *> optional (space *> exprListInParens)),
    NumericNumeric <$> (string' "numeric" *> endHead *> optional (space *> exprListInParens)),
    BooleanNumeric <$ string' "boolean"
  ]

bit = do
  string' "bit"
  a <- option False (True <$ space1 <* string' "varying")
  b <- optional (space1 *> exprListInParens)
  return (Bit a b)

constBit = bit

constCharacter = ConstCharacter <$> (character <* endHead) <*> optional (space *> inParens iconst)

character = asum [
    CharacterCharacter <$> (string' "character" *> optVaryingAfterSpace),
    CharCharacter <$> (string' "char" *> optVaryingAfterSpace),
    VarcharCharacter <$ string' "varchar",
    NationalCharacterCharacter <$> (keyphrase "national character" *> optVaryingAfterSpace),
    NationalCharCharacter <$> (keyphrase "national char" *> optVaryingAfterSpace),
    NcharCharacter <$> (string' "nchar" *> optVaryingAfterSpace)
  ]
  where
    optVaryingAfterSpace = True <$ space1 <* string' "varying" <|> pure False

{-
ConstDatetime:
  | TIMESTAMP '(' Iconst ')' opt_timezone
  | TIMESTAMP opt_timezone
  | TIME '(' Iconst ')' opt_timezone
  | TIME opt_timezone
-}
constDatetime = asum [
    do
      string' "timestamp"
      a <- optional (space1 *> inParens iconst)
      b <- optional (space1 *> timezone)
      return (TimestampConstDatetime a b)
    ,
    do
      string' "time"
      a <- optional (space1 *> inParens iconst)
      b <- optional (space1 *> timezone)
      return (TimeConstDatetime a b)
  ]

timezone = asum [
    False <$ keyphrase "with time zone",
    True <$ keyphrase "without time zone"
  ]

interval = asum [
    YearToMonthInterval <$ keyphrase "year to month",
    DayToHourInterval <$ keyphrase "day to hour",
    DayToMinuteInterval <$ keyphrase "day to minute",
    DayToSecondInterval <$> (keyphrase "day to" *> space1 *> endHead *> intervalSecond),
    HourToMinuteInterval <$ keyphrase "hour to minute",
    HourToSecondInterval <$> (keyphrase "hour to" *> space1 *> endHead *> intervalSecond),
    MinuteToSecondInterval <$> (keyphrase "minute to" *> space1 *> endHead *> intervalSecond),
    YearInterval <$ string' "year",
    MonthInterval <$ string' "month",
    DayInterval <$ string' "day",
    HourInterval <$ string' "hour",
    MinuteInterval <$ string' "minute",
    SecondInterval <$> intervalSecond
  ]

intervalSecond = do
  string' "second"
  a <- optional (space *> inParens iconst)
  return a


-- * Types
-------------------------

{-|
>>> testParser typecastTypename "int4"
TypecastTypename (UnquotedIdent "int4") False 0 False

>>> testParser typecastTypename "int4?"
TypecastTypename (UnquotedIdent "int4") True 0 False

>>> testParser typecastTypename "int4[]"
TypecastTypename (UnquotedIdent "int4") False 1 False

>>> testParser typecastTypename "int4[ ] []"
TypecastTypename (UnquotedIdent "int4") False 2 False

>>> testParser typecastTypename "int4[][]?"
TypecastTypename (UnquotedIdent "int4") False 2 True

>>> testParser typecastTypename "int4?[][]"
TypecastTypename (UnquotedIdent "int4") True 2 False
-}
typecastTypename = label "type" $ do
  _baseName <- typeFunctionName
  endHead
  _baseNullable <- option False (True <$ space <* char '?')
  _arrayLevels <- fmap length $ many $ space *> char '[' *> endHead *> space *> char ']'
  _arrayNullable <- option False (True <$ space <* char '?')
  return (TypecastTypename _baseName _baseNullable _arrayLevels _arrayNullable)


-- * Clauses
-------------------------

{-
select_limit:
  | limit_clause offset_clause
  | offset_clause limit_clause
  | limit_clause
  | offset_clause
-}
selectLimit =
  asum
    [
      do
        _a <- limitClause
        LimitOffsetSelectLimit _a <$> (space1 *> offsetClause) <|> pure (LimitSelectLimit _a)
      ,
      do
        _a <- offsetClause
        OffsetLimitSelectLimit _a <$> (space1 *> limitClause) <|> pure (OffsetSelectLimit _a)
    ]

{-
limit_clause:
  | LIMIT select_limit_value
  | LIMIT select_limit_value ',' select_offset_value
  | FETCH first_or_next select_fetch_first_value row_or_rows ONLY
  | FETCH first_or_next row_or_rows ONLY
-}
limitClause =
  (do
    string' "limit"
    endHead
    space1
    _a <- selectLimitValue
    _b <- optional $ do
      commaSeparator
      aExpr
    return (LimitLimitClause _a _b)
  ) <|>
  (do
    string' "fetch"
    endHead
    space1
    _a <- firstOrNext
    space1
    asum [
        do
          _b <- rowOrRows
          space1
          string' "only"
          return (FetchOnlyLimitClause _a Nothing _b)
        ,
        do
          _b <- selectFetchFirstValue
          space1
          _c <- rowOrRows
          space1
          string' "only"
          return (FetchOnlyLimitClause _a (Just _b) _c)
      ]
  )

offsetClause = do
  string' "offset"
  endHead
  space1
  offsetClauseParams

offsetClauseParams =
  FetchFirstOffsetClause <$> wrapToHead selectFetchFirstValue <*> (space1 *> rowOrRows) <|>
  ExprOffsetClause <$> aExpr

{-
select_limit_value:
  | a_expr
  | ALL
-}
selectLimitValue =
  AllSelectLimitValue <$ string' "all" <|>
  ExprSelectLimitValue <$> aExpr

rowOrRows =
  True <$ string' "rows" <|>
  False <$ string' "row"

firstOrNext =
  False <$ string' "first" <|>
  True <$ string' "next"

selectFetchFirstValue =
  ExprSelectFetchFirstValue <$> cExpr <|>
  NumSelectFetchFirstValue <$> (plusOrMinus <* endHead <* space) <*> iconstOrFconst

plusOrMinus = False <$ char '+' <|> True <$ char '-'


-- * For Locking
-------------------------

{-
for_locking_clause:
  | for_locking_items
  | FOR READ ONLY
for_locking_items:
  | for_locking_item
  | for_locking_items for_locking_item
-}
forLockingClause = readOnly <|> items where
  readOnly = ReadOnlyForLockingClause <$ keyphrase "for read only"
  items = ItemsForLockingClause <$> sep1 space1 forLockingItem

{-
for_locking_item:
  | for_locking_strength locked_rels_list opt_nowait_or_skip
locked_rels_list:
  | OF qualified_name_list
  | EMPTY
opt_nowait_or_skip:
  | NOWAIT
  | SKIP LOCKED
  | EMPTY
-}
forLockingItem = do
  _strength <- forLockingStrength
  _rels <- optional $ space1 *> string' "of" *> space1 *> endHead *> sep1 commaSeparator qualifiedName
  _nowaitOrSkip <- optional (space1 *> nowaitOrSkip)
  return (ForLockingItem _strength _rels _nowaitOrSkip)

{-
for_locking_strength:
  | FOR UPDATE
  | FOR NO KEY UPDATE
  | FOR SHARE
  | FOR KEY SHARE
-}
forLockingStrength =
  UpdateForLockingStrength <$ keyphrase "for update" <|>
  NoKeyUpdateForLockingStrength <$ keyphrase "for no key update" <|>
  ShareForLockingStrength <$ keyphrase "for share" <|>
  KeyForLockingStrength <$ keyphrase "for key share"

nowaitOrSkip = False <$ string' "nowait" <|> True <$ keyphrase "skip locked"


-- * References & Names
-------------------------

quotedName = filter (const "Empty name") (not . Text.null) (quotedString '"') & fmap QuotedIdent

{-
ident_start   [A-Za-z\200-\377_]
ident_cont    [A-Za-z\200-\377_0-9\$]
identifier    {ident_start}{ident_cont}*
-}
ident = quotedName <|> keywordNameByPredicate (not . Predicate.keyword)

{-
ColId:
  |  IDENT
  |  unreserved_keyword
  |  col_name_keyword
-}
{-# NOINLINE colId #-}
colId = label "identifier" $
  ident <|> keywordNameFromSet (HashSet.unreservedKeyword <> HashSet.colNameKeyword)

{-
ColLabel:
  |  IDENT
  |  unreserved_keyword
  |  col_name_keyword
  |  type_func_name_keyword
  |  reserved_keyword
-}
colLabel = label "column label" $
  ident <|> keywordNameFromSet HashSet.keyword

{-|
>>> testParser qualifiedName "a.b"
IndirectedQualifiedName (UnquotedIdent "a") (AttrNameIndirectionEl (UnquotedIdent "b") :| [])

>>> testParser qualifiedName "a.-"
...
expecting '*', column label, or white space
-}
{-
qualified_name:
  | ColId
  | ColId indirection
-}
qualifiedName =
  IndirectedQualifiedName <$> wrapToHead colId <*> (space *> indirection) <|>
  SimpleQualifiedName <$> colId

columnref = do
  a <- wrapToHead colId
  endHead
  b <- optional (space *> indirection)
  return (Columnref a b)

anyName = do
  a <- wrapToHead colId
  endHead
  b <- optional (space *> attrs)
  return (AnyName a b)

{-
func_name:
  | type_function_name
  | ColId indirection
-}
funcName =
  IndirectedFuncName <$> wrapToHead colId <*> (space *> indirection) <|>
  TypeFuncName <$> typeFunctionName

{-
type_function_name:
  | IDENT
  | unreserved_keyword
  | type_func_name_keyword
-}
typeFunctionName =
  ident <|>
  keywordNameFromSet (HashSet.unreservedKeyword <> HashSet.typeFuncNameKeyword)

{-
indirection:
  | indirection_el
  | indirection indirection_el
-}
indirection = some indirectionEl

{-
indirection_el:
  | '.' attr_name
  | '.' '*'
  | '[' a_expr ']'
  | '[' opt_slice_bound ':' opt_slice_bound ']'
opt_slice_bound:
  | a_expr
  | EMPTY
-}
indirectionEl =
  asum
    [
      do
        char '.'
        endHead
        space
        AllIndirectionEl <$ char '*' <|> AttrNameIndirectionEl <$> attrName
      ,
      do
        char '['
        endHead
        space
        _a <- asum [
            do
              char ':'
              endHead
              space
              _b <- optional aExpr
              return (SliceIndirectionEl Nothing _b)
            ,
            do
              _a <- aExpr
              asum [
                  do
                    space
                    char ':'
                    space
                    _b <- optional aExpr
                    return (SliceIndirectionEl (Just _a) _b)
                  ,
                  return (ExprIndirectionEl _a)
                ]
          ]
        space
        char ']'
        return _a
    ]

{-
attr_name:
  | ColLabel
-}
attrName = colLabel

keywordNameFromSet _set = keywordNameByPredicate (Predicate.inSet _set)

keywordNameByPredicate _predicate =
  fmap UnquotedIdent $
  filter
    (\ a -> "Reserved keyword " <> show a <> " used as an identifier. If that's what you intend, you have to wrap it in double quotes.")
    _predicate
    keyword

keyword = parse $ Megaparsec.label "keyword" $ do
  _firstChar <- Megaparsec.satisfy Predicate.firstIdentifierChar
  _remainder <- Megaparsec.takeWhileP Nothing Predicate.notFirstIdentifierChar
  return (Text.toLower (Text.cons _firstChar _remainder))

{-|
Consume a keyphrase, ignoring case and types of spaces between words.
-}
keyphrase a = Text.words a & fmap (void . MegaparsecChar.string') & intersperse MegaparsecChar.space1 & sequence_ & fmap (const (Text.toUpper a)) & Megaparsec.label (show a) & parse


-- * Typename
-------------------------

typeList = sep1 commaSeparator typename

typename =
  do
    a <- option False (string' "SETOF" *> space1 $> True)
    b <- simpleTypename
    endHead
    asum [
        do
          space1
          string' "ARRAY"
          c <- optional (space *> inBrackets iconst)
          return (ArrayDimTypename a b c)
        ,
        do
          c <- optional (space1 *> arrayBounds)
          return (ArrayBoundsTypename a b c)
      ]

arrayBounds = sep1 space (inBrackets (optional iconst))

simpleTypename = asum [
    do
      string' "interval"
      endHead
      asum [
          ConstIntervalSimpleTypename <$> Right <$> (space *> inParens iconst),
          ConstIntervalSimpleTypename <$> Left <$> optional (space *> interval)
        ],
    NumericSimpleTypename <$> numeric,
    BitSimpleTypename <$> bit,
    CharacterSimpleTypename <$> character,
    ConstDatetimeSimpleTypename <$> constDatetime,
    GenericTypeSimpleTypename <$> genericType
  ]

genericType = do
  a <- typeFunctionName
  endHead
  b <- optional (space *> attrs)
  c <- optional (space1 *> typeModifiers)
  return (GenericType a b c)

attrs = some (char '.' *> endHead *> space *> attrName)

typeModifiers = inParens exprList
